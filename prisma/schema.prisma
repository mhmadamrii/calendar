// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String         @unique
    emailVerified DateTime?
    image         String?        @default("https://avatars.githubusercontent.com/u/10367109?v=4")
    accounts      Account[]
    sessions      Session[]
    grantId       String?
    grantEmail    String?
    username      String?        @unique
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    Availability  Availability[]
    EventType     EventType[]
}

model Availability {
    id String @id @default(uuid())

    day      Day
    fromTime String // e.g., '08:00'
    tillTime String // e.g., '18:00'
    isActive Boolean @default(true) // Toggle availability for the day

    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Day {
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Saturday
    Sunday
}

model EventType {
    id                String  @id @default(uuid())
    title             String
    duration          Int
    url               String
    description       String
    active            Boolean @default(true)
    videoCallSoftware String  @default("Google Meet")
    status            String  @default("urgent")

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    createdAt DateTime @default(now())
}
